"""
üß† Soccer Scout AI - Analisador T√°tico Avan√ßado
Sistema de an√°lise t√°tica usando IA para avaliar compatibilidade de jogadores com sistemas t√°ticos
"""

import asyncio
from typing import Dict, List, Optional
from openai import OpenAI
from config import settings

class TacticalAnalyzer:
    """Analisador t√°tico avan√ßado com IA"""
    
    def __init__(self):
        self.client = OpenAI(api_key=settings.OPENAI_API_KEY) if settings.OPENAI_API_KEY else None
        
        # Sistemas t√°ticos conhecidos
        self.tactical_systems = {
            "4-3-3": {
                "description": "Sistema ofensivo com pontas largos e meio-campo equilibrado",
                "positions": ["GK", "RB", "CB", "CB", "LB", "DM", "CM", "CM", "RW", "ST", "LW"],
                "characteristics": ["posse de bola", "jogo pelos flancos", "press√£o alta"]
            },
            "4-2-3-1": {
                "description": "Sistema vers√°til com dois volantes e meia-atacante",
                "positions": ["GK", "RB", "CB", "CB", "LB", "DM", "DM", "CAM", "RW", "ST", "LW"],
                "characteristics": ["equil√≠brio", "criatividade central", "transi√ß√µes r√°pidas"]
            },
            "3-5-2": {
                "description": "Sistema com tr√™s zagueiros e meio-campo largo",
                "positions": ["GK", "CB", "CB", "CB", "RWB", "CM", "CM", "CM", "LWB", "ST", "ST"],
                "characteristics": ["controle do meio", "largura pelos laterais", "jogo a√©reo"]
            },
            "4-4-2": {
                "description": "Sistema cl√°ssico com duas linhas de quatro",
                "positions": ["GK", "RB", "CB", "CB", "LB", "RM", "CM", "CM", "LM", "ST", "ST"],
                "characteristics": ["compacta√ß√£o", "jogo direto", "dupla de ataque"]
            }
        }
    
    async def analyze_player_tactical_fit(self, player: Dict, system: str) -> Dict:
        """Analisar adequa√ß√£o de um jogador a um sistema t√°tico"""
        
        if not self.client:
            return self._mock_tactical_analysis(player, system)
        
        system_info = self.tactical_systems.get(system, {})
        
        prompt = f"""
        Analise a adequa√ß√£o t√°tica do jogador para o sistema {system}:
        
        **JOGADOR:**
        - Nome: {player.get('name')}
        - Posi√ß√£o: {player.get('position')}
        - Idade: {player.get('age')} anos
        - Altura: {player.get('height', 'N/A')}cm
        - P√© preferido: {player.get('preferred_foot', 'N/A')}
        - Gols na temporada: {player.get('goals_season', 0)}
        - Assist√™ncias: {player.get('assists_season', 0)}
        - Jogos: {player.get('appearances', 0)}
        
        **SISTEMA T√ÅTICO: {system}**
        - Descri√ß√£o: {system_info.get('description', '')}
        - Caracter√≠sticas: {', '.join(system_info.get('characteristics', []))}
        
        Forne√ßa uma an√°lise detalhada em formato JSON:
        {{
            "tactical_score": <nota de 1-10>,
            "position_compatibility": <adequa√ß√£o da posi√ß√£o>,
            "strengths": [<pontos fortes para o sistema>],
            "weaknesses": [<pontos fracos para o sistema>],
            "recommendations": [<recomenda√ß√µes espec√≠ficas>],
            "alternative_positions": [<posi√ß√µes alternativas no sistema>],
            "playing_style": "<estilo de jogo recomendado>",
            "key_attributes": [<atributos mais importantes>]
        }}
        """
        
        try:
            response = self.client.chat.completions.create(
                model=settings.OPENAI_MODEL,
                messages=[
                    {"role": "system", "content": "Voc√™ √© um analista t√°tico especialista em futebol. Forne√ßa an√°lises precisas e profissionais."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,
                max_tokens=1000
            )
            
            import json
            content = response.choices[0].message.content.strip()
            
            # Limpar markdown se presente
            if content.startswith("```json"):
                content = content[7:]
            if content.endswith("```"):
                content = content[:-3]
            
            return json.loads(content)
            
        except Exception as e:
            print(f"Error in tactical analysis: {str(e)}")
            return self._mock_tactical_analysis(player, system)
    
    def _mock_tactical_analysis(self, player: Dict, system: str) -> Dict:
        """An√°lise t√°tica mockada para desenvolvimento"""
        position = player.get('position', '')
        
        # Simula√ß√£o baseada na posi√ß√£o
        if "Forward" in position or "Striker" in position:
            score = 8.5 if system in ["4-3-3", "4-2-3-1"] else 7.0
            strengths = ["Finaliza√ß√£o", "Movimenta√ß√£o na √°rea", "Jogo a√©reo"]
            weaknesses = ["Cria√ß√£o de jogadas", "Marca√ß√£o defensiva"]
        elif "Midfield" in position:
            score = 9.0 if system in ["4-2-3-1", "3-5-2"] else 7.5
            strengths = ["Passe", "Vis√£o de jogo", "Controle de bola"]
            weaknesses = ["Velocidade", "Jogo a√©reo defensivo"]
        elif "Back" in position or "Defence" in position:
            score = 8.0 if system in ["3-5-2", "4-4-2"] else 7.5
            strengths = ["Marca√ß√£o", "Intercepta√ß√£o", "Jogo a√©reo"]
            weaknesses = ["Velocidade", "Passe longo"]
        else:
            score = 7.5
            strengths = ["Versatilidade", "Experi√™ncia"]
            weaknesses = ["Especializa√ß√£o"]
        
        return {
            "tactical_score": score,
            "position_compatibility": "Alta" if score >= 8 else "M√©dia",
            "strengths": strengths,
            "weaknesses": weaknesses,
            "recommendations": [
                f"Ideal para o {system} devido √†s suas caracter√≠sticas",
                "Treinar aspectos defensivos" if "Forward" in position else "Melhorar passe"
            ],
            "alternative_positions": ["Central Midfield", "Attacking Midfield"],
            "playing_style": "Din√¢mico e vers√°til",
            "key_attributes": ["T√©cnica", "Posicionamento", "F√≠sico"]
        }
    
    async def analyze_team_formation(self, players: List[Dict], system: str) -> Dict:
        """Analisar forma√ß√£o completa da equipe"""
        
        analyses = []
        for player in players[:11]:  # Apenas titulares
            analysis = await self.analyze_player_tactical_fit(player, system)
            analyses.append({
                "player": player,
                "analysis": analysis
            })
        
        # Calcular estat√≠sticas da forma√ß√£o
        scores = [a["analysis"]["tactical_score"] for a in analyses]
        avg_score = sum(scores) / len(scores) if scores else 0
        
        # Identificar pontos fortes e fracos da forma√ß√£o
        strengths = []
        weaknesses = []
        
        for analysis in analyses:
            strengths.extend(analysis["analysis"]["strengths"])
            weaknesses.extend(analysis["analysis"]["weaknesses"])
        
        # Contar frequ√™ncias
        from collections import Counter
        strength_counts = Counter(strengths)
        weakness_counts = Counter(weaknesses)
        
        return {
            "system": system,
            "overall_score": round(avg_score, 1),
            "player_analyses": analyses,
            "team_strengths": [s for s, c in strength_counts.most_common(5)],
            "team_weaknesses": [w for w, c in weakness_counts.most_common(3)],
            "formation_balance": self._calculate_formation_balance(analyses),
            "recommendations": await self._generate_formation_recommendations(analyses, system)
        }
    
    def _calculate_formation_balance(self, analyses: List[Dict]) -> Dict:
        """Calcular equil√≠brio da forma√ß√£o"""
        
        # Simular c√°lculo de equil√≠brio
        attack_score = 8.2
        midfield_score = 7.8
        defense_score = 8.5
        
        return {
            "attack": attack_score,
            "midfield": midfield_score,
            "defense": defense_score,
            "overall_balance": round((attack_score + midfield_score + defense_score) / 3, 1)
        }
    
    async def _generate_formation_recommendations(self, analyses: List[Dict], system: str) -> List[str]:
        """Gerar recomenda√ß√µes para a forma√ß√£o"""
        
        if not self.client:
            return [
                f"Forma√ß√£o {system} bem equilibrada",
                "Considerar trabalhar transi√ß√µes defensivas",
                "Explorar mais o jogo pelos flancos",
                "Melhorar entrosamento do meio-campo"
            ]
        
        # Preparar dados para an√°lise
        team_summary = "\n".join([
            f"- {a['player']['name']} ({a['player']['position']}): Nota {a['analysis']['tactical_score']}"
            for a in analyses
        ])
        
        prompt = f"""
        Analise esta forma√ß√£o {system} e forne√ßa recomenda√ß√µes t√°ticas:
        
        **ESCALA√á√ÉO:**
        {team_summary}
        
        Forne√ßa 4-6 recomenda√ß√µes t√°ticas espec√≠ficas e pr√°ticas para melhorar o desempenho da equipe.
        Foque em aspectos como:
        - Movimenta√ß√µes t√°ticas
        - Transi√ß√µes
        - Press√£o e marca√ß√£o
        - Cria√ß√£o de jogadas
        - Explora√ß√£o de pontos fortes
        """
        
        try:
            response = self.client.chat.completions.create(
                model=settings.OPENAI_MODEL,
                messages=[
                    {"role": "system", "content": "Voc√™ √© um treinador t√°tico expert. Forne√ßa recomenda√ß√µes pr√°ticas e espec√≠ficas."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.4,
                max_tokens=600
            )
            
            content = response.choices[0].message.content.strip()
            # Dividir em lista de recomenda√ß√µes
            recommendations = [r.strip() for r in content.split('\n') if r.strip() and not r.strip().startswith('#')]
            
            return recommendations[:6]  # M√°ximo 6 recomenda√ß√µes
            
        except Exception as e:
            print(f"Error generating recommendations: {str(e)}")
            return [
                f"Forma√ß√£o {system} bem estruturada",
                "Trabalhar movimenta√ß√£o sem bola",
                "Melhorar compacta√ß√£o defensiva",
                "Explorar transi√ß√µes r√°pidas"
            ]
    
    async def compare_tactical_systems(self, players: List[Dict], systems: List[str]) -> Dict:
        """Comparar diferentes sistemas t√°ticos para o mesmo elenco"""
        
        comparisons = {}
        
        for system in systems:
            if system in self.tactical_systems:
                analysis = await self.analyze_team_formation(players, system)
                comparisons[system] = analysis
        
        # Encontrar melhor sistema
        best_system = max(comparisons.keys(), 
                         key=lambda s: comparisons[s]["overall_score"])
        
        return {
            "comparisons": comparisons,
            "recommended_system": best_system,
            "system_rankings": sorted(
                [(s, data["overall_score"]) for s, data in comparisons.items()],
                key=lambda x: x[1],
                reverse=True
            ),
            "summary": await self._generate_system_comparison_summary(comparisons)
        }
    
    async def _generate_system_comparison_summary(self, comparisons: Dict) -> str:
        """Gerar resumo da compara√ß√£o de sistemas"""
        
        if not self.client:
            return "An√°lise comparativa dos sistemas t√°ticos mostrou diferentes pontos fortes para cada forma√ß√£o."
        
        # Preparar dados
        systems_data = []
        for system, data in comparisons.items():
            systems_data.append(f"{system}: Nota {data['overall_score']}")
        
        prompt = f"""
        Compare estes sistemas t√°ticos e forne√ßa um resumo executivo:
        
        **RESULTADOS:**
        {chr(10).join(systems_data)}
        
        Forne√ßa um resumo de 2-3 par√°grafos explicando:
        1. Qual sistema √© mais adequado e por qu√™
        2. Principais diferen√ßas entre os sistemas
        3. Recomenda√ß√£o final
        """
        
        try:
            response = self.client.chat.completions.create(
                model=settings.OPENAI_MODEL,
                messages=[
                    {"role": "system", "content": "Voc√™ √© um analista t√°tico. Forne√ßa resumos claros e objetivos."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,
                max_tokens=400
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            print(f"Error generating summary: {str(e)}")
            return "An√°lise detalhada dos sistemas t√°ticos realizada com sucesso."