"""
üìä Soccer Scout AI - Gerador de Relat√≥rios Autom√°ticos
Sistema de gera√ß√£o autom√°tica de relat√≥rios de scouting usando IA
"""

import asyncio
import json
from typing import Dict, List, Optional
from datetime import datetime
from openai import OpenAI
from config import settings

class ReportGenerator:
    """Gerador autom√°tico de relat√≥rios de scouting com IA"""
    
    def __init__(self):
        self.client = OpenAI(api_key=settings.OPENAI_API_KEY) if settings.OPENAI_API_KEY else None
        
    async def generate_player_scouting_report(self, player: Dict, detailed: bool = True) -> Dict:
        """Gerar relat√≥rio completo de scouting de um jogador"""
        
        if not self.client:
            return self._mock_scouting_report(player, detailed)
        
        prompt = f"""
        Gere um relat√≥rio de scouting profissional para:
        
        **JOGADOR:** {player.get('name')}
        **DADOS:**
        - Idade: {player.get('age')} anos
        - Posi√ß√£o: {player.get('position')}
        - Time atual: {player.get('team')}
        - Liga: {player.get('league')}
        - Valor de mercado: ‚Ç¨{player.get('market_value', 0)}M
        - Nacionalidade: {player.get('nationality')}
        - Altura: {player.get('height', 'N/A')}cm
        - P√© preferido: {player.get('preferred_foot', 'N/A')}
        - Gols (temporada): {player.get('goals_season', 0)}
        - Assist√™ncias: {player.get('assists_season', 0)}
        - Jogos: {player.get('appearances', 0)}
        
        **N√çVEL DE DETALHAMENTO:** {'Completo' if detailed else 'Resumido'}
        
        Forne√ßa um relat√≥rio estruturado em JSON:
        {{
            "executive_summary": "<resumo executivo de 2-3 linhas>",
            "player_profile": {{
                "playing_style": "<estilo de jogo>",
                "key_strengths": [<principais qualidades>],
                "areas_for_improvement": [<pontos a melhorar>],
                "unique_attributes": [<caracter√≠sticas √∫nicas>]
            }},
            "technical_analysis": {{
                "ball_skills": "<avalia√ß√£o das habilidades com bola>",
                "shooting": "<an√°lise de finaliza√ß√£o>",
                "passing": "<qualidade de passe>",
                "dribbling": "<capacidade de drible>",
                "first_touch": "<primeiro toque>",
                "weak_foot": "<uso do p√© fraco>"
            }},
            "physical_attributes": {{
                "pace": "<velocidade>",
                "strength": "<for√ßa f√≠sica>",
                "stamina": "<resist√™ncia>",
                "agility": "<agilidade>",
                "aerial_ability": "<jogo a√©reo>",
                "injury_history": "<hist√≥rico de les√µes>"
            }},
            "mental_attributes": {{
                "decision_making": "<tomada de decis√£o>",
                "composure": "<compostura>",
                "work_rate": "<intensidade>",
                "leadership": "<lideran√ßa>",
                "adaptability": "<adaptabilidade>"
            }},
            "tactical_fit": {{
                "preferred_systems": [<sistemas t√°ticos ideais>],
                "position_versatility": "<versatilidade posicional>",
                "role_in_team": "<papel na equipe>",
                "tactical_discipline": "<disciplina t√°tica>"
            }},
            "market_analysis": {{
                "current_value_assessment": "<avalia√ß√£o do valor atual>",
                "transfer_feasibility": "<viabilidade de transfer√™ncia>",
                "contract_situation": "<situa√ß√£o contratual>",
                "competition_for_signature": "<concorr√™ncia por assinatura>"
            }},
            "risk_assessment": {{
                "injury_risk": "<risco de les√£o>",
                "adaptation_risk": "<risco de adapta√ß√£o>",
                "performance_consistency": "<consist√™ncia de performance>",
                "age_related_decline": "<decl√≠nio relacionado √† idade>"
            }},
            "recommendation": {{
                "overall_rating": "<nota de 1-10>",
                "transfer_recommendation": "<recomenda√ß√£o de contrata√ß√£o>",
                "ideal_transfer_value": "<valor ideal de transfer√™ncia>",
                "priority_level": "<alta/m√©dia/baixa>",
                "timeline": "<prazo recomendado para abordagem>"
            }},
            "comparable_players": [<jogadores similares para compara√ß√£o>],
            "scout_notes": [<observa√ß√µes espec√≠ficas do scout>]
        }}
        """
        
        try:
            response = self.client.chat.completions.create(
                model=settings.OPENAI_MODEL,
                messages=[
                    {"role": "system", "content": "Voc√™ √© um scout profissional de futebol com 20 anos de experi√™ncia. Gere relat√≥rios detalhados, objetivos e profissionais."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,
                max_tokens=2000
            )
            
            content = response.choices[0].message.content.strip()
            
            if content.startswith("```json"):
                content = content[7:]
            if content.endswith("```"):
                content = content[:-3]
            
            report_data = json.loads(content)
            
            # Adicionar metadados
            report_data["metadata"] = {
                "generated_at": datetime.now().isoformat(),
                "scout_id": "AI_SYSTEM",
                "report_version": "1.0",
                "confidence_level": 85
            }
            
            return report_data
            
        except Exception as e:
            print(f"Error generating scouting report: {str(e)}")
            return self._mock_scouting_report(player, detailed)
    
    def _mock_scouting_report(self, player: Dict, detailed: bool) -> Dict:
        """Relat√≥rio de scouting mockado para desenvolvimento"""
        
        position = player.get('position', '')
        age = player.get('age', 25)
        
        return {
            "executive_summary": f"{player.get('name')} √© um {position.lower()} de {age} anos com potencial interessante para clubes que buscam qualidade t√©cnica e versatilidade t√°tica.",
            "player_profile": {
                "playing_style": "T√©cnico e inteligente",
                "key_strengths": ["Vis√£o de jogo", "Passe preciso", "Finaliza√ß√£o"],
                "areas_for_improvement": ["Velocidade", "Jogo a√©reo", "Consist√™ncia"],
                "unique_attributes": ["Ambidestro", "Lideran√ßa natural"]
            },
            "technical_analysis": {
                "ball_skills": "Excelente controle de bola e primeira recep√ß√£o",
                "shooting": "Finaliza√ß√£o precisa com ambos os p√©s",
                "passing": "Passe longo e curto de alta qualidade",
                "dribbling": "Drible efetivo em espa√ßos reduzidos",
                "first_touch": "Primeiro toque refinado sob press√£o",
                "weak_foot": "Uso competente do p√© fraco"
            },
            "physical_attributes": {
                "pace": "Velocidade adequada para a posi√ß√£o",
                "strength": "For√ßa f√≠sica suficiente para disputas",
                "stamina": "Boa resist√™ncia durante 90 minutos",
                "agility": "Agilidade acima da m√©dia",
                "aerial_ability": "Jogo a√©reo limitado",
                "injury_history": "Hist√≥rico de les√µes limpo"
            },
            "mental_attributes": {
                "decision_making": "Tomada de decis√£o madura e eficaz",
                "composure": "Mant√©m calma em momentos decisivos",
                "work_rate": "Intensidade constante durante o jogo",
                "leadership": "Qualidades de lideran√ßa em desenvolvimento",
                "adaptability": "Adapta-se bem a diferentes sistemas"
            },
            "tactical_fit": {
                "preferred_systems": ["4-2-3-1", "4-3-3", "3-5-2"],
                "position_versatility": "Pode atuar em m√∫ltiplas posi√ß√µes",
                "role_in_team": "Pe√ßa-chave na cria√ß√£o e finaliza√ß√£o",
                "tactical_discipline": "Boa disciplina t√°tica e posicionamento"
            },
            "market_analysis": {
                "current_value_assessment": "Valor condizente com o mercado atual",
                "transfer_feasibility": "Transfer√™ncia vi√°vel no pr√≥ximo per√≠odo",
                "contract_situation": "Contrato at√© 2026",
                "competition_for_signature": "Interesse de clubes europeus"
            },
            "risk_assessment": {
                "injury_risk": "Baixo risco baseado no hist√≥rico",
                "adaptation_risk": "Risco moderado de adapta√ß√£o",
                "performance_consistency": "Performance consistente na temporada",
                "age_related_decline": "Ainda no auge da carreira"
            },
            "recommendation": {
                "overall_rating": "8.2/10",
                "transfer_recommendation": "Recomendado para contrata√ß√£o",
                "ideal_transfer_value": f"‚Ç¨{player.get('market_value', 30)}M",
                "priority_level": "alta" if age < 26 else "m√©dia",
                "timeline": "Janela de transfer√™ncia de ver√£o"
            },
            "comparable_players": ["Player A", "Player B", "Player C"],
            "scout_notes": [
                "Jogador com grande potencial de crescimento",
                "Adequado ao estilo de jogo da equipe",
                "Investimento com bom retorno esperado"
            ],
            "metadata": {
                "generated_at": datetime.now().isoformat(),
                "scout_id": "AI_SYSTEM",
                "report_version": "1.0",
                "confidence_level": 85
            }
        }
    
    async def generate_team_analysis_report(self, players: List[Dict], team_name: str = "Equipe Alvo") -> Dict:
        """Gerar relat√≥rio de an√°lise de equipe completa"""
        
        if not self.client:
            return self._mock_team_analysis(players, team_name)
        
        # Preparar dados da equipe
        team_summary = self._prepare_team_summary(players)
        
        prompt = f"""
        Analise esta equipe de futebol e gere um relat√≥rio completo:
        
        **EQUIPE:** {team_name}
        **ELENCO:** {len(players)} jogadores
        
        **RESUMO DO ELENCO:**
        {team_summary}
        
        Forne√ßa an√°lise completa em JSON:
        {{
            "team_overview": {{
                "squad_size": <tamanho do elenco>,
                "average_age": <idade m√©dia>,
                "total_market_value": <valor total em milh√µes>,
                "nationality_distribution": [<distribui√ß√£o por nacionalidade>],
                "experience_level": "<n√≠vel de experi√™ncia>"
            }},
            "positional_analysis": {{
                "goalkeeper": "<an√°lise dos goleiros>",
                "defense": "<an√°lise da defesa>",
                "midfield": "<an√°lise do meio-campo>",
                "attack": "<an√°lise do ataque>",
                "depth_assessment": "<avalia√ß√£o da profundidade do elenco>"
            }},
            "team_strengths": [<pontos fortes da equipe>],
            "team_weaknesses": [<pontos fracos da equipe>],
            "tactical_flexibility": {{
                "formation_options": [<forma√ß√µes poss√≠veis>],
                "style_variations": [<varia√ß√µes de estilo>],
                "player_versatility": "<versatilidade dos jogadores>"
            }},
            "transfer_priorities": {{
                "immediate_needs": [<necessidades imediatas>],
                "future_planning": [<planejamento futuro>],
                "budget_allocation": "<aloca√ß√£o de or√ßamento recomendada>"
            }},
            "competitive_assessment": {{
                "league_competitiveness": "<competitividade na liga>",
                "european_potential": "<potencial europeu>",
                "development_trajectory": "<trajet√≥ria de desenvolvimento>"
            }},
            "management_recommendations": [<recomenda√ß√µes para a gest√£o>],
            "overall_grade": "<nota geral A-F>"
        }}
        """
        
        try:
            response = self.client.chat.completions.create(
                model=settings.OPENAI_MODEL,
                messages=[
                    {"role": "system", "content": "Voc√™ √© um diretor esportivo experiente. Analise equipes de forma estrat√©gica e abrangente."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,
                max_tokens=1500
            )
            
            content = response.choices[0].message.content.strip()
            
            if content.startswith("```json"):
                content = content[7:]
            if content.endswith("```"):
                content = content[:-3]
            
            return json.loads(content)
            
        except Exception as e:
            print(f"Error generating team analysis: {str(e)}")
            return self._mock_team_analysis(players, team_name)
    
    def _prepare_team_summary(self, players: List[Dict]) -> str:
        """Preparar resumo da equipe para an√°lise"""
        
        summary_lines = []
        for player in players[:15]:  # Limitar a 15 jogadores para o prompt
            line = f"- {player.get('name')} ({player.get('age')}a, {player.get('position')}, ‚Ç¨{player.get('market_value', 0)}M)"
            summary_lines.append(line)
        
        return "\n".join(summary_lines)
    
    def _mock_team_analysis(self, players: List[Dict], team_name: str) -> Dict:
        """An√°lise de equipe mockada"""
        
        avg_age = sum(p.get('age', 25) for p in players) / len(players) if players else 25
        total_value = sum(p.get('market_value', 0) for p in players)
        
        return {
            "team_overview": {
                "squad_size": len(players),
                "average_age": round(avg_age, 1),
                "total_market_value": round(total_value, 1),
                "nationality_distribution": ["Brasil 30%", "Argentina 20%", "Europa 50%"],
                "experience_level": "Misto entre experi√™ncia e juventude"
            },
            "positional_analysis": {
                "goalkeeper": "Posi√ß√£o bem coberta com op√ß√µes confi√°veis",
                "defense": "Defesa s√≥lida mas pode precisar de refor√ßos",
                "midfield": "Meio-campo criativo e bem distribu√≠do",
                "attack": "Ataque potente com boas op√ß√µes",
                "depth_assessment": "Elenco com boa profundidade na maioria das posi√ß√µes"
            },
            "team_strengths": [
                "Criatividade no meio-campo",
                "Versatilidade t√°tica",
                "Qualidade t√©cnica individual",
                "Esp√≠rito de equipe"
            ],
            "team_weaknesses": [
                "Falta de velocidade nas laterais",
                "Depend√™ncia de jogadores-chave",
                "Inconsist√™ncia defensiva"
            ],
            "tactical_flexibility": {
                "formation_options": ["4-3-3", "4-2-3-1", "3-5-2"],
                "style_variations": ["Posse de bola", "Contra-ataque", "Press√£o alta"],
                "player_versatility": "V√°rios jogadores podem atuar em m√∫ltiplas posi√ß√µes"
            },
            "transfer_priorities": {
                "immediate_needs": ["Lateral-direito", "Volante defensivo"],
                "future_planning": ["Sucessor do capit√£o", "Jovens talentos"],
                "budget_allocation": "60% refor√ßos imediatos, 40% investimento futuro"
            },
            "competitive_assessment": {
                "league_competitiveness": "Competitivo para t√≠tulos nacionais",
                "european_potential": "Pode competir em competi√ß√µes europeias",
                "development_trajectory": "Equipe em desenvolvimento ascendente"
            },
            "management_recommendations": [
                "Focar no desenvolvimento dos jovens",
                "Melhorar a consist√™ncia defensiva",
                "Diversificar as op√ß√µes t√°ticas",
                "Investir em tecnologia de an√°lise"
            ],
            "overall_grade": "B+"
        }
    
    async def generate_transfer_feasibility_report(self, player: Dict, target_club: str) -> Dict:
        """Gerar relat√≥rio de viabilidade de transfer√™ncia"""
        
        if not self.client:
            return self._mock_transfer_feasibility(player, target_club)
        
        prompt = f"""
        Analise a viabilidade de transfer√™ncia:
        
        **JOGADOR:** {player.get('name')}
        - Clube atual: {player.get('team')}
        - Valor: ‚Ç¨{player.get('market_value', 0)}M
        - Idade: {player.get('age')} anos
        - Posi√ß√£o: {player.get('position')}
        
        **CLUBE INTERESSADO:** {target_club}
        
        Avalie a viabilidade em JSON:
        {{
            "feasibility_score": <0-100>,
            "financial_aspects": {{
                "transfer_fee_estimate": "<estimativa da taxa>",
                "salary_expectations": "<expectativas salariais>",
                "additional_costs": [<custos adicionais>],
                "financial_feasibility": "<alta/m√©dia/baixa>"
            }},
            "sporting_factors": {{
                "position_need": "<necessidade da posi√ß√£o>",
                "tactical_fit": "<adequa√ß√£o t√°tica>",
                "squad_integration": "<integra√ß√£o ao elenco>",
                "playing_time_guarantee": "<garantia de tempo de jogo>"
            }},
            "negotiation_challenges": [<desafios na negocia√ß√£o>],
            "success_probability": "<alta/m√©dia/baixa>",
            "timeline_estimate": "<prazo estimado>",
            "alternative_strategies": [<estrat√©gias alternativas>],
            "recommendation": "<recomenda√ß√£o final>"
        }}
        """
        
        try:
            response = self.client.chat.completions.create(
                model=settings.OPENAI_MODEL,
                messages=[
                    {"role": "system", "content": "Voc√™ √© um especialista em transfer√™ncias de futebol. Analise viabilidade considerando todos os aspectos."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,
                max_tokens=1000
            )
            
            content = response.choices[0].message.content.strip()
            
            if content.startswith("```json"):
                content = content[7:]
            if content.endswith("```"):
                content = content[:-3]
            
            return json.loads(content)
            
        except Exception as e:
            print(f"Error generating transfer feasibility: {str(e)}")
            return self._mock_transfer_feasibility(player, target_club)
    
    def _mock_transfer_feasibility(self, player: Dict, target_club: str) -> Dict:
        """Relat√≥rio de viabilidade mockado"""
        
        value = player.get('market_value', 30)
        feasibility = 75 if value < 50 else 60 if value < 100 else 40
        
        return {
            "feasibility_score": feasibility,
            "financial_aspects": {
                "transfer_fee_estimate": f"‚Ç¨{value}M - ‚Ç¨{value + 10}M",
                "salary_expectations": f"‚Ç¨{value // 10}M por ano",
                "additional_costs": ["Comiss√£o de agente", "B√¥nus por performance"],
                "financial_feasibility": "alta" if value < 50 else "m√©dia"
            },
            "sporting_factors": {
                "position_need": "Alta necessidade da posi√ß√£o",
                "tactical_fit": "Boa adequa√ß√£o ao sistema",
                "squad_integration": "Integra√ß√£o facilitada",
                "playing_time_guarantee": "Tempo de jogo assegurado"
            },
            "negotiation_challenges": [
                "Competi√ß√£o de outros clubes",
                "Resist√™ncia do clube atual",
                "Timing da negocia√ß√£o"
            ],
            "success_probability": "alta" if feasibility > 70 else "m√©dia",
            "timeline_estimate": "2-4 semanas",
            "alternative_strategies": [
                "Empr√©stimo com op√ß√£o de compra",
                "Negocia√ß√£o em janela futura",
                "Jogador + dinheiro"
            ],
            "recommendation": "Prosseguir com negocia√ß√£o" if feasibility > 60 else "Considerar alternativas"
        }